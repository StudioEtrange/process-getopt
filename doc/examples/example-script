#!/bin/bash

# $Id: example-script,v 1.13 2011/07/15 18:07:13 bhepple Exp $

# A tutorial example for process-getopt 

# error on first failed command or unreferencing a undefined variable:
set -eu

check_and_process_opts() {
    local NO_OPTS TEMP

    # avoid the overhead of process-getopt if there are no options:
    NO_OPTS="yes"
    for i in "$@"; do
        [[ "$i" == -* ]] && NO_OPTS="" && break
        [[ "${STOP_ON_FIRST_NON_OPT:-''}" ]] && break
    done
    [ "$NO_OPTS" ] && return 1

    source ../../src/process-getopt || exit 1

    # These are the option helper functions that are called in response to
    # an option being found on the command line. They are called by
    # call_getopt with parameters set:
    # $1 = the option eg -c or --cdrom
    # $2 = any argument to the option, if present
    #
    # These helpers generally just set flags and store values
    #
    # Note that they are also called by add_opt (with no parameters)
    # to check for their existence, so make sure the are defined
    # _before_ calling add_opt:

    CD_func()     { [ "${1:-""}" ] && echo "$PROG: got a CD option"; }
    SLOT_func()   { [ "${1:-""}" ] && echo "$PROG: got a SLOT option = \"$2\""; }
    TOKEN_func()  { [ "${1:-""}" ] && echo "$PROG: got a TOKEN option = \"$2\""; }
    FLOAT_func()  { [ "${1:-""}" ] && echo "$PROG: got a FLOAT option = \"$2\""; }
    URL_func()    { [ "${1:-""}" ] && echo "$PROG: got a URL option = \"$2\""; }
    ARRAY_func()  { [ "${1:-""}" ] && echo "$PROG: got an ARRAY option = \"$2\""; }
    LONG_func()   { [ "${1:-""}" ] && echo "$PROG: got a LONG option"; }
    SILENT_func() { [ "${1:-""}" ] && echo "$PROG: got a SILENT option"; }

    # Now we define the options:
    add_opt CD "foobar" c "" cdrom
    add_opt SLOT "option that takes a value" s n slot number
    add_opt TOKEN "option that takes a value" t n token number i 1-10
    add_opt FLOAT "option that takes a floating point value" f f float float f 1.0-3
    add_opt URL "option that takes a URL value" u url url url u
    add_opt ARRAY "option that takes an ARRAY value" a value array value a "A B C"
    add_opt LONG "a long option without a short one" "" "" "long"
    add_opt SILENT "" S # does not appear in help or man page
    # These would generate errors:
    # add_opt CD "foobar" c "" cdrom # re-use of option identifiers 'c/cdrom'
    # add_opt D "foobar" d "" delta # no D_func defined for this one
    # add_opt E-ffect "foobar" e # NAME must be [a-zA-Z0-9_]

    add_std_opts # define the standard options --help etc

    # delete any options we don't need:
    del_opt QUIET END_OPTIONS

    # process the command line, callback get called here:
    TEMP=$(call_getopt "$@") || exit 1
    eval set -- "$TEMP"
    process_opts "$@" || shift $?
    NEW_ARGS=( "$@" )
    return 0
}

##########################
#         M A I N        #
##########################

PROG=$(basename $0)
DIR=$(dirname $0)
VERSION="1.2"
VERBOSE=""
ARGUMENTS="COMMANDS"
SHORT_DESC="Short one-liner for man page. "
USAGE="Longer description for the help page and as a starting point for the \
man page. Try running this with the --help or --print-man-page options."

TMP="/tmp/tmp$$.tmp"
trap "/bin/rm -f $TMP" EXIT 

STOP_ON_FIRST_NON_OPT=yes

NEW_ARGS=( )
check_and_process_opts "$@" && {
    if [ ${#NEW_ARGS[@]} -gt 0 ]; then
        set -- "${NEW_ARGS[@]}"
    else
        set --
    fi
}

# At this point, all the options have been processed and removed from
# the arg list. We can now process $@ as arguments to the program.

# MAIN PROCESSING
echo "Remaining args:"
for arg in "$@"; do echo "\"$arg\""; done

EXPR="echo $PROG operating on these: $@"
[ "$VERBOSE" ] && echo $EXPR
eval $EXPR

