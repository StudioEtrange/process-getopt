#!/bin/bash

PROG=$(basename $0)

# initialise defaults:
export INT=1
export STRING=a
export DOUBLE=1

I_R="1-3"
D_R=".1-4"
S_R="'a b'"

# OPTION: long-name shopt flag type       arg       range description
export ARGS="
PROG: $PROG
OPTION:   bool      b     -    boolean    -         -     a boolean
OPTION:   int       i     -    integer    units     $I_R  an integer ($I_R) (default $INT)
OPTION:   string    s     -    string     widgets   $S_R  a string ($S_R) (default $STRING)
OPTION:   file      f     -    file       filename  -     a file; this option has been given a very long description to see what happens to it - it's not very good as it doesn't get formatted by glib. sigh. Better look at popt or argp.
OPTION:   hidden    -     h    string     things    -     a hidden option
OPTION:   double    d     -    double     miles     $D_R  a double ($D_R) (default $DOUBLE)
OPTION:   reverse   r     r    boolean    -         -     a reversed option
OPTION:   rh        -     rh   boolean    -         -     a reversed, hidden option!!
USAGE:
[--] [args]
Sprog the bracken fest
Spring the flingen dump
"

# or you can: export USAGE="Sprog the bracken fest"
echo "$0: \$@=$@"

exec 4>&1 # fd4 is now a copy of fd1 ie stdout
RES=$( echo "$ARGS" | ./goption "$@" 3>&1 1>&4 ) # goption outputs its commands on fd3; help goes to fd1

[ "$RES" ] || exit 0 # probably from --help
echo "RES=$RES"
eval $RES
echo
echo "In $0:"
echo "BOOL=$BOOL"
echo "INT=$INT"
echo "STRING=$STRING"
echo "FILE=$FILE"
echo "VERBOSE=$VERBOSE"
echo "HIDDEN=$HIDDEN"
echo "DOUBLE=$DOUBLE"
echo "REVERSE=$REVERSE"
echo "RH=$RH"
echo -n "\$@ ="
for i in "$@"; do echo -n " '$i'"; done
echo
