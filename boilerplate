#!/bin/bash

# Copyright 2008-2011 Bob Hepple
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

# http://sourceforge.net/projects/process-getopt
# http://process-getopt.sourceforge.net
# http://bhepple.freeshell.org/oddmuse/wiki.cgi/process-getopt

# $Id: boilerplate,v 1.15 2011/07/15 18:07:13 bhepple Exp $

# A minimal script that uses process-getopt - pour your content in here
# where it says  # CUSTOMISE

# error on first failed command or unreferencing a undefined variable:
set -eu

check_and_process_opts() {
    local NO_OPTS TEMP

    # avoid the overhead of process-getopt if there are no options:
    NO_OPTS="yes"
    for i in "$@"; do
        [[ "$i" == -* ]] && NO_OPTS="" && break
        [[ "${STOP_ON_FIRST_NON_OPT:-''}" ]] && break
    done
    [ "$NO_OPTS" ] && return 1

    source process-getopt

    # define our options: # CUSTOMISE
    SLOT_func()   { [ "${1:-""}" ] && SLOT="yes"; }
    add_opt SLOT "boolean option" s "" slot ""
    TOKEN_func()  { [ "${1:-""}" ] && TOKEN="$2"; }
    add_opt TOKEN "option that takes a value" t n token number i 1-2

    # define the standard options --help etc:
    add_std_opts 

    # delete any standard options you don't want:
    del_opt QUIET
    del_opt END_OPTIONS

    # process the command line, callback get called here:
    TEMP=$(call_getopt "$@") || exit 1
    eval set -- "$TEMP"
    process_opts "$@" || shift "$?"

    # return the new command line (stripped of options):
    NEW_ARGS=( "$@" )
    return 0
}

##########################
#         M A I N        #
##########################

PROG=$(basename $0)
DIR=$(dirname $0)
VERSION='$Revision: 1.15 $' # CUSTOMISE
VERBOSE=""
ARGUMENTS="<files>" # CUSTOMISE
SHORT_DESC="Short description. " # CUSTOMISE
USAGE="More detailed description." # CUSTOMISE

TMP="/tmp/tmp$$.tmp"
trap "/bin/rm -f $TMP" EXIT 

NEW_ARGS=( )
check_and_process_opts "$@" && {
    if [ ${#NEW_ARGS[@]} -gt 0 ]; then
        set -- "${NEW_ARGS[@]}"
    else
        set --
    fi
}

# At this point, all the options have been processed and removed from
# the arg list. We can now process $@ as arguments to the program.

# MAIN PROCESSING
# CUSTOMISE:
echo "Remaining args:"
for arg in "$@"; do echo "\"$arg\""; done

[ "$VERBOSE" ] && set -x

# do whatever:

exit 0
