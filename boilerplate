#!/bin/sh

# http://bhepple.freeshell.org
# http://process-getopt.sourceforge.net
# $Id: boilerplate,v 1.5 2008/10/31 06:47:39 bhepple Exp $

# A minimal script that uses process-getopt - pour your content in here

PROG=$(basename $0)
DIR=$(dirname $0)
VERSION="1.2"
VERBOSE=""
ARGUMENTS=""
SHORT_DESC=""
USAGE="\
$SHORT_DESC.
"

TMP="/tmp/tmp$$.tmp"
trap "/bin/rm -f $TMP" EXIT 

# process-getopt needs to be able to call `usage':
usage() {
    echo "Usage: $PROG [ OPTIONS ] $ARGUMENTS"
    echo "$USAGE"
    echo
    echo "Options:"
    print_all_opts
}

# Pull in the process-getopt code - as long as it's somewhere on $PATH
OLD_PATH="$PATH"
PATH="$PATH:$DIR:."
PG=$(type process-getopt |cut -d' ' -f 3)
PATH="$OLD_PATH"
[ "$PG" ] || exit 1
source $PG

# option helper functions: customise:
SLOT_func()   { [ "$1" ] && SLOT="yes"; }
TOKEN_func()  { [ "$1" ] && TOKEN="$2"; }
add_opt SLOT "boolean option" s "" slot 
add_opt TOKEN "option that takes a value" t n token number
add_std_opts # define the standard options --help etc

# Call getopt:
# export STOP_ON_FIRST_NON_OPT="yes" # set this if desired - see doco
TEMP=$(call_getopt "$@") || exit 1
eval set -- "$TEMP"
process_opts "$@"
shift "$?"

# At this point, all the options have been processed and removed from
# the arg list. We can now process $@ as arguments to the program.

# MAIN PROCESSING
echo "Remaining args:"
for arg in "$@"; do echo "\"$arg\""; done

[ "$VERBOSE" ] && set -x

# do whatever:

exit 0
