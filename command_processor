#!/bin/sh

# http://bhepple.freeshell.org
# http://process-getopt.sourceforge.net
# $Id: command_processor,v 1.1 2008/11/02 10:09:27 bhepple Exp $

# A test script for process-getopt - just echos options and args

PROG=$(basename $0)
DIR=$(dirname $0)
VERSION="1.2"
VERBOSE=""
ARGUMENTS="add | multiply | frob | bris [ COMMAND_OPTIONS] "
SHORT_DESC="echos options and args to stdout"
USAGE="\
$SHORT_DESC.
"

TMP="/tmp/tmp$$.tmp"
trap "/bin/rm -f $TMP" EXIT 

# process-getopt needs to be able to call `usage':
usage() {
    echo "Usage: $PROG [ OPTIONS ] $ARGUMENTS"
    echo "$USAGE"
    echo
    echo "Options:"
    print_all_opts
}

# Pull in the process-getopt code - as long as it's somewhere on $PATH
OLD_PATH="$PATH"
PATH=".:$PATH:$DIR"
PG=$(type process-getopt |cut -d' ' -f 3)
PATH="$OLD_PATH"
[ "$PG" ] || exit 1
source $PG

process_global_options() {
    # option helper functions:
    SLOT=""
    SLOT_func() { [ "$1" ] && SLOT="yes" && echo VERBOSE=$SOPT_VERBOSE; }
    add_opt SLOT "boolean option" s "" slot 

    TOKEN=""
    TOKEN_func() { [ "$1" ] && TOKEN="$2"; }
    add_opt TOKEN "option that takes a value" t n token number

    LONGONLY=""
    LONGONLY_func() { [ "$1" ] && LONGONLY="$2"; }
    add_opt LONGONLY "long option without short option" "" "" "long-only" "value"

    COUNTED=0
    COUNTED_func() {  [ "$1" ] && (( COUNTED++ )); }
    add_opt COUNTED "an option which increments every time it is given" c

    add_std_opts # define the standard options --help etc

    # Call getopt:
    export STOP_ON_FIRST_NON_OPT="yes"
    TEMP=$(call_getopt "$@") || exit 1
    eval set -- "$TEMP"
    process_opts "$@"; shift "$?"
    NEW_ARGS=( "$@" )
}

process_add_options() {
    # option helper functions:
    clean_process_getopt
    SLOT=""
    SLOT_func() { [ "$1" ] && SLOT="yes"; }
    add_opt SLOT "boolean option" s "" slot 

    TOKEN=""
    TOKEN_func() { [ "$1" ] && TOKEN="$2"; }
    add_opt TOKEN "option that takes a value" t n token number

    LONGONLY=""
    LONGONLY_func() { [ "$1" ] && LONGONLY="$2"; }
    add_opt LONGONLY "long option without short option" "" "" "long-only" "value"

    COUNTED=0
    COUNTED_func() {  [ "$1" ] && (( COUNTED++ )); }
    add_opt COUNTED "an option which increments every time it is given" c

    add_std_opts # define the standard options --help etc

    # Call getopt:
    export STOP_ON_FIRST_NON_OPT="yes"
    TEMP=$(call_getopt "$@") || exit 1
    eval set -- "$TEMP"
    process_opts "$@"; shift "$?"
    NEW_ARGS=( "$@" )
}

# Main

NEW_ARGS=( )
process_global_options "$@"
set -- "${NEW_ARGS[@]}"
echo "After global option processing we have:"
for i in "$@"; do echo -n " \"$i\""; done
echo

# $@ now contains only the command and its options

[ "$SLOT" ] && echo "SLOT option (-$(get_opt_letter SLOT), --$(get_opt_string SLOT))"
[ "$TOKEN" ] && echo "TOKEN option (-$(get_opt_letter TOKEN) \"$TOKEN\", --$(get_opt_string TOKEN)=\"$TOKEN\")"
[ "$LONGONLY" ] && echo "LONGONLY option (--$(get_opt_string LONGONLY)=\"$LONGONLY\")"
[ "$COUNTED" -gt 0 ] && echo "COUNTED option (-$(get_opt_letter COUNTED) = $COUNTED)"
[ "$VERBOSE" ] && echo "VERBOSE option (-$(get_opt_letter VERBOSE), --$(get_opt_string VERBOSE))"

COMMAND="$1"
shift

case $COMMAND in
    add) 
        NEW_ARGS=( )
        process_add_options "$@"
        set -- "${NEW_ARGS[@]}"
        echo "After add option processing we have:"
        for i in "$@"; do echo -n " \"$i\""; done
        echo

        [ "$SLOT" ] && echo "SLOT option (-$(get_opt_letter SLOT), --$(get_opt_string SLOT))"
        [ "$TOKEN" ] && echo "TOKEN option (-$(get_opt_letter TOKEN) \"$TOKEN\", --$(get_opt_string TOKEN)=\"$TOKEN\")"
        [ "$LONGONLY" ] && echo "LONGONLY option (--$(get_opt_string LONGONLY)=\"$LONGONLY\")"
        [ "$COUNTED" -gt 0 ] && echo "COUNTED option (-$(get_opt_letter COUNTED) = $COUNTED)"
        [ "$VERBOSE" ] && echo "VERBOSE option (-$(get_opt_letter VERBOSE), --$(get_opt_string VERBOSE))"
        ;;
    *)
esac
