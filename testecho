#!/bin/sh

# Copyright 2008-2011 Bob Hepple
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

# http://sourceforge.net/projects/process-getopt
# http://process-getopt.sourceforge.net
# http://bhepple.freeshell.org/oddmuse/wiki.cgi/process-getopt

# $Id: testecho,v 1.6 2011/04/20 06:24:56 bhepple Exp $

# A test script for process-getopt - just echos options and args

check_and_process_opts() {
    local NO_OPTS TEMP PG

#    # avoid the overhead of process-getopt if there are no options:
#    NO_OPTS="yes"
#    for i in "$@"; do
#        case "$i" in
#            -*)
#                NO_OPTS=""
#                break
#                ;;
#        esac
#    done
#    [ "$NO_OPTS" ] && return 1

    PG=$(PATH=".:$PATH:$DIR"; type process-getopt |cut -d' ' -f 3)
    [ "$PG" ] || exit 1
    source $PG

    SLOT_func() { [ "$1" ] && SLOT="yes" && echo VERBOSE=$SOPT_VERBOSE; }
    add_opt SLOT "boolean option" s "" slot 

    TOKEN_func() { [ "$1" ] && TOKEN="$2"; }
    add_opt TOKEN "option that takes a value" t n token number

    LONGONLY_func() { [ "$1" ] && LONGONLY="$2"; }
    add_opt LONGONLY "long option without short option" "" "" "long-only" "value"

    COUNTED_func() {  [ "$1" ] && (( COUNTED++ )); }
    add_opt COUNTED "an option which increments every time it is given" c

    add_std_opts # define the standard options --help etc

    TEMP=$(call_getopt "$@") || exit 1
    eval set -- "$TEMP"
    process_opts "$@"
    shift "$?"
    NEW_ARGS=( "$@" )
    return 0
}

##########################
#         M A I N        #
##########################

PROG=$(basename $0)
DIR=$(dirname $0)
VERSION="1.0"
VERBOSE=""
ARGUMENTS=""
SHORT_DESC="Echos options and args to stdout. "
USAGE=""

TMP="/tmp/tmp$$.tmp"
trap "/bin/rm -f $TMP" EXIT 
COUNTED=0
LONGONLY=""
TOKEN=""
SLOT=""

NEW_ARGS=( )
check_and_process_opts "$@"
[ ${#NEW_ARGS[@]} -gt 0 ] && set -- "${NEW_ARGS[@]}" || set --

# At this point, all the options have been processed and removed from
# the arg list. We can now process $@ as arguments to the program.

[ "$SLOT" ] && echo "SLOT option (-$(get_opt_letter SLOT), --$(get_opt_string SLOT))"
[ "$TOKEN" ] && echo "TOKEN option (-$(get_opt_letter TOKEN) \"$TOKEN\", --$(get_opt_string TOKEN)=\"$TOKEN\")"
[ "$LONGONLY" ] && echo "LONGONLY option (--$(get_opt_string LONGONLY)=\"$LONGONLY\")"
[ "$COUNTED" -gt 0 ] && echo "COUNTED option (-$(get_opt_letter COUNTED) = $COUNTED)"
[ "$VERBOSE" ] && echo "VERBOSE option (-$(get_opt_letter VERBOSE), --$(get_opt_string VERBOSE))"

# MAIN PROCESSING
echo "Remaining args:"
for arg in "$@"; do echo "\"$arg\""; done

echo
echo "Testing print utilities:"
print_short_args
echo
print_long_args
echo
print_all_args
echo

echo "SOPT_SLOT=-$SOPT_SLOT"
echo "ARG_SOPTA_TOKEN=$ARG_SOPTA_TOKEN"
exit 0

# test cases:
./testecho -vs a b c --long-only 1 -c -c -c -cccc
SLOT option (-s, --slot)
LONGONLY option (--long-only="1")
COUNTED option (-c) = 7
VERBOSE option (-v, --verbose)
Remaining args:
"a"
"b"
"c"

STOP_ON_FIRST_NON_OPT=1 ./testecho -vs a b c --long-only 1 -c -c -c -cccc
SLOT option (-s, --slot)
VERBOSE option (-v, --verbose)
Remaining args:
"a"
"b"
"c"
"--long-only"
"1"
"-c"
"-c"
"-c"
"-cccc"

./testecho -vs a "b c" --long-only=1 -c -c -c -cccc
SLOT option (-s, --slot)
LONGONLY option (--long-only="1")
COUNTED option (-c) = 7
VERBOSE option (-v, --verbose)
Remaining args:
"a"
"b c"

./testecho -h
Usage: testecho [ OPTIONS ]
echos options and args to stdout.


Options:
  -s, --slot                boolean option
  -t n, --token=number      option that takes a value
  --long-only=value         long option without short option
  -c                        an option which increments every time it is given
  -h, --help                print this help and exit
  -V, --version             print version and exit
  -v, --verbose             do it verbosely
  --                        explicitly ends the options
